************* Module src.wsgi
src/wsgi.py:11:0: W0611: Unused import sys (unused-import)
************* Module src.organizations.models
src/organizations/models.py:50:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/organizations/models.py:69:0: R0901: Too many ancestors (11/7) (too-many-ancestors)
src/organizations/models.py:252:32: E1101: Instance of 'File' has no 'url' member (no-member)
src/organizations/models.py:406:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/organizations/models.py:534:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/organizations/models.py:545:0: R0901: Too many ancestors (9/7) (too-many-ancestors)
************* Module src.organizations.views
src/organizations/views.py:303:0: C0301: Line too long (131/100) (line-too-long)
src/organizations/views.py:330:0: C0301: Line too long (130/100) (line-too-long)
src/organizations/views.py:432:0: C0301: Line too long (131/100) (line-too-long)
src/organizations/views.py:462:0: C0301: Line too long (131/100) (line-too-long)
src/organizations/views.py:213:17: R1719: The if expression can be replaced with 'not test' (simplifiable-if-expression)
src/organizations/views.py:281:0: R0914: Too many local variables (16/15) (too-many-locals)
src/organizations/views.py:495:17: R1719: The if expression can be replaced with 'not test' (simplifiable-if-expression)
************* Module src.organizations.decorators
src/organizations/decorators.py:24:12: W0612: Unused variable 'organization' (unused-variable)
src/organizations/decorators.py:70:16: W0612: Unused variable 'organization' (unused-variable)
************* Module src.settings.local
src/settings/local.py:5:0: W0614: Unused import(s) DEBUG, DATABASES, SECURE_SSL_REDIRECT, AWS_QUERYSTRING_AUTH, MEDIA_URL, LOGGING, os, DEBUG_TOOLBAR, PROJECT_PATH, ENVIRONMENT, DJANGO_SETTINGS_MODULE, ADMINS, MANAGERS, DOMAIN_NAME, ALLOWED_HOSTS, APPEND_SLASH, TIME_ZONE, LANGUAGE_CODE, LANGUAGES, LOCALE_PATHS, SITE_ID, USE_I18N, USE_L10N, USE_TZ, ADMIN_MEDIA_PREFIX, MEDIA_ROOT, STATIC_URL, STATIC_ROOT, STATICFILES_DIRS, STATICFILES_FINDERS, SECRET_KEY, TEMPLATES, DEFAULT_AUTO_FIELD, MIDDLEWARE, ROOT_URLCONF, WSGI_APPLICATION, INSTALLED_APPS, SESSION_SERIALIZER, CACHES, AUTHENTICATION_BACKENDS, SELFREFLECTION_SUBMIT_DURATION_PERIOD, PROFILE_COMPLETENESS_GRACE_PERIOD, EVENT_NAME_RESERVED_WORDS, ORGANIZATION_NAME_RESERVED_WORDS, BOWER_COMPONENTS_ROOT, BOWER_PATH, BOWER_INSTALLED_APPS, CKEDITOR_BROWSE_SHOW_DIRS, CKEDITOR_IMAGE_BACKEND, CKEDITOR_RESTRICT_BY_DATE, CKEDITOR_RESTRICT_BY_USER, CKEDITOR_UPLOAD_PATH, CKEDITOR_UPLOAD_SLUGIFY_FILENAME, CKEDITOR_CONFIGS, IMAGE_QUALITY, THUMBNAIL_SIZE, X_FRAME_OPTIONS, COMPRESS_PRECOMPILERS, COMPRESS_CSS_FILTERS, COMPRESS_JS_FILTERS, COMPRESS_ENABLED, GEOIP_DATABASE, GEOIPV6_DATABASE, GEOIP_PATH, GRAPPELLI_ADMIN_TITLE, GRAPPELLI_AUTOCOMPLETE_LIMIT, GRAPPELLI_SWITCH_USER, HAYSTACK_CONNECTIONS, HAYSTACK_DEFAULT_OPERATOR, HAYSTACK_SEARCH_RESULTS_PER_PAGE, IMAGEKIT_CACHEFILE_DIR, IMAGEKIT_DEFAULT_CACHEFILE_BACKEND, IMAGEKIT_DEFAULT_CACHEFILE_STRATEGY, IMAGEKIT_CACHEFILE_NAMER, IMAGEKIT_SPEC_CACHEFILE_NAMER, MPTT_ADMIN_LEVEL_INDENT, MAX_MEMBERS_PER_PAGE, MAX_MEMBERS_PER_QUERY, MAX_POSTS_PER_PAGE, MAX_POSTS_PER_QUERY, MAX_EVENTS_PER_PAGE, MAX_EVENTS_PER_QUERY, MAX_ORGANIZATIONS_PER_PAGE, MAX_ORGANIZATIONS_PER_QUERY, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH, PASSWORD_DICTIONARY, PASSWORD_MATCH_THRESHOLD, PASSWORD_COMMON_SEQUENCES, PASSWORD_COMPLEXITY, PHONENUMBER_DB_FORMAT, REST_FRAMEWORK, SWAGGER_SETTINGS, ROSETTA_MESSAGES_PER_PAGE, ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS, YANDEX_TRANSLATE_KEY, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, ROSETTA_MESSAGES_SOURCE_LANGUAGE_CODE, ROSETTA_MESSAGES_SOURCE_LANGUAGE_NAME, ROSETTA_WSGI_AUTO_RELOAD, ROSETTA_UWSGI_AUTO_RELOAD, ROSETTA_EXCLUDED_APPLICATIONS, ROSETTA_EXCLUDED_PATHS, ROSETTA_REQUIRES_AUTH, ROSETTA_POFILE_WRAP_WIDTH, ROSETTA_POFILENAMES, ROSETTA_STORAGE_CLASS, ROSETTA_ACCESS_CONTROL_FUNCTION, ROSETTA_LANGUAGE_GROUPS, ROSETTA_AUTO_COMPILE, CAPTCHA_FONT_SIZE, CAPTCHA_BACKGROUND_COLOR, CAPTCHA_FOREGROUND_COLOR, CAPTCHA_PUNCTUATION, CAPTCHA_TIMEOUT, CAPTCHA_LENGTH, CAPTCHA_IMAGE_BEFORE_FIELD, CAPTCHA_DICTIONARY_MIN_LENGTH, CAPTCHA_DICTIONARY_MAX_LENGTH, CAPTCHA_TEST_MODE, SESSION_COOKIE_AGE, LOGIN_URL, LOGIN_REDIRECT_URL, SOCIAL_AUTH_UUID_LENGTH, SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL, SOCIAL_AUTH_SLUGIFY_USERNAMES, SOCIAL_AUTH_CLEAN_USERNAMES, SOCIAL_AUTH_COMPLETE_URL_NAME, SOCIAL_AUTH_ASSOCIATE_URL_NAME, SOCIAL_AUTH_DEFAULT_USERNAME, SOCIAL_AUTH_CREATE_USERS, SOCIAL_AUTH_PIPELINE, SOCIAL_AUTH_FACEBOOK_KEY, SOCIAL_AUTH_FACEBOOK_SECRET, SOCIAL_AUTH_FACEBOOK_SCOPE, SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS, TWITTER_OAUTH_TOKEN, TWITTER_OAUTH_SECRET, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, SOCIAL_AUTH_TWITTER_KEY, SOCIAL_AUTH_TWITTER_SECRET, LINKEDIN_OAUTH_TOKEN, LINKEDIN_OAUTH_SECRET, LINKEDIN_CONSUMER_KEY, LINKEDIN_CONSUMER_SECRET, LINKEDIN_SCOPE, LINKEDIN_EXTRA_FIELD_SELECTORS, SOCIAL_AUTH_LINKEDIN_KEY, SOCIAL_AUTH_LINKEDIN_SECRET, SOCIAL_AUTH_LINKEDIN_SCOPE, SOCIAL_AUTH_LINKEDIN_FIELD_SELECTORS, SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY, SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET, SOCIAL_AUTH_LINKEDIN_OAUTH2_SCOPE, SOCIAL_AUTH_LINKEDIN_OAUTH2_FIELD_SELECTORS, TAGGIT_CASE_INSENSITIVE, TAGGIT_TAGCLOUD_MIN, TAGGIT_TAGCLOUD_MAX, TAGGIT_LIMIT, TAGGIT_TAG_LIST_ORDER_BY, TAGGIT_TAG_CLOUD_ORDER_BY, WHITENOISE_MAX_AGE, EMAIL_SENDER, EMAIL_SUPPORT, EMAIL_BACKEND, SENDGRID_API_KEY, PB_SOCIAL_LINKS and UPLOADER_SETTINGS from wildcard import of base (unused-wildcard-import)
************* Module src.settings
src/settings/__init__.py:57:4: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/settings/__init__.py:68:4: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
************* Module src.settings.base
src/settings/base.py:397:0: C0301: Line too long (123/100) (line-too-long)
src/settings/base.py:427:0: C0301: Line too long (112/100) (line-too-long)
src/settings/base.py:657:0: C0301: Line too long (105/100) (line-too-long)
src/settings/base.py:658:0: C0301: Line too long (104/100) (line-too-long)
src/settings/base.py:659:0: C0301: Line too long (103/100) (line-too-long)
src/settings/base.py:665:0: C0301: Line too long (116/100) (line-too-long)
src/settings/base.py:736:0: C0301: Line too long (313/100) (line-too-long)
src/settings/base.py:757:0: C0301: Line too long (109/100) (line-too-long)
src/settings/base.py:1:0: C0302: Too many lines in module (1072/1000) (too-many-lines)
src/settings/base.py:856:31: C3001: Lambda expression assigned to a variable. Define a function using the "def" keyword instead. (unnecessary-lambda-assignment)
src/settings/base.py:856:39: E0602: Undefined variable 'random' (undefined-variable)
************* Module src.home.models
src/home/models.py:25:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/home/models.py:126:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/home/models.py:205:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/home/models.py:267:24: W0613: Unused argument 'created' (unused-argument)
************* Module src.home.admin
src/home/admin.py:104:4: W0221: Number of parameters was 4 in 'BaseModelAdmin.formfield_for_dbfield' and is now 3 in overridden 'SectionAdmin.formfield_for_dbfield' method (arguments-differ)
************* Module src.home.views
src/home/views.py:44:4: W0612: Unused variable 'country' (unused-variable)
src/home/views.py:45:4: W0612: Unused variable 'city' (unused-variable)
src/home/views.py:174:4: W0621: Redefining name 'faq' from outer scope (line 129) (redefined-outer-name)
************* Module src.app.apps
src/app/apps.py:8:0: E0102: class already defined line 5 (function-redefined)
************* Module src.app.admin
src/app/admin.py:259:22: W0613: Unused argument 'modeladmin' (unused-argument)
src/app/admin.py:266:20: W0613: Unused argument 'modeladmin' (unused-argument)
************* Module src.app.utils
src/app/utils.py:19:0: R0913: Too many arguments (7/5) (too-many-arguments)
src/app/utils.py:24:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/app/utils.py:70:0: R0913: Too many arguments (7/5) (too-many-arguments)
src/app/utils.py:75:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
************* Module src.app.views
src/app/views.py:31:37: W0613: Unused argument 'resource' (unused-argument)
src/app/views.py:98:11: R5101: Instead of HttpResponse(json.dumps(data)) use JsonResponse(data) (http-response-with-json-dumps)
src/app/views.py:98:11: R5102: Instead of HttpResponse(content_type='application/json') use JsonResponse() (http-response-with-content-type-json)
src/app/views.py:138:11: R5101: Instead of HttpResponse(json.dumps(data)) use JsonResponse(data) (http-response-with-json-dumps)
src/app/views.py:138:11: R5102: Instead of HttpResponse(content_type='application/json') use JsonResponse() (http-response-with-content-type-json)
src/app/views.py:169:11: R5101: Instead of HttpResponse(json.dumps(data)) use JsonResponse(data) (http-response-with-json-dumps)
src/app/views.py:169:11: R5102: Instead of HttpResponse(content_type='application/json') use JsonResponse() (http-response-with-content-type-json)
************* Module src.app.templatetags.common_tags
src/app/templatetags/common_tags.py:31:4: C0103: Variable name "m" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:33:8: C0103: Variable name "m" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:84:4: C0103: Variable name "m" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:94:15: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/app/templatetags/common_tags.py:100:11: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/app/templatetags/common_tags.py:104:14: W0622: Redefining built-in 'str' (redefined-builtin)
src/app/templatetags/common_tags.py:125:8: C0103: Variable name "kv" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:164:11: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/app/templatetags/common_tags.py:193:8: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:195:15: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/app/templatetags/common_tags.py:201:13: C0103: Argument name "d" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:214:21: C0207: Use str(value).split('.', maxsplit=1)[0] instead (use-maxsplit-arg)
src/app/templatetags/common_tags.py:246:15: W0621: Redefining name 'sub' from outer scope (line 246) (redefined-outer-name)
src/app/templatetags/common_tags.py:264:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:265:9: R1701: Consider merging these isinstance calls to isinstance(instance, (QuerySet, list)) (consider-merging-isinstance)
src/app/templatetags/common_tags.py:267:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:269:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:271:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:280:13: C0103: Argument name "l" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:286:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:297:13: C0103: Argument name "l" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:303:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
src/app/templatetags/common_tags.py:353:8: W0613: Unused argument 'parser' (unused-argument)
************* Module src.blog.models
src/blog/models.py:44:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/blog/models.py:172:32: E1101: Instance of 'File' has no 'url' member (no-member)
************* Module src.accounts.auth_pipelines
src/accounts/auth_pipelines.py:14:0: R0913: Too many arguments (9/5) (too-many-arguments)
src/accounts/auth_pipelines.py:14:0: W1113: Keyword argument before variable positional arguments list in the definition of save_profile function (keyword-arg-before-vararg)
src/accounts/auth_pipelines.py:56:23: W3101: Missing timeout argument for method 'requests.get' can cause your program to hang indefinitely (missing-timeout)
src/accounts/auth_pipelines.py:15:27: W0613: Unused argument 'uid' (unused-argument)
src/accounts/auth_pipelines.py:15:42: W0613: Unused argument 'details' (unused-argument)
src/accounts/auth_pipelines.py:15:57: W0613: Unused argument 'social' (unused-argument)
************* Module src.accounts.models
src/accounts/models.py:68:5: W0511: TODO: For each Model define the Attributes and Methods in this Order: (fixme)
src/accounts/models.py:54:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:194:8: C0103: Variable name "dt" doesn't conform to snake_case naming style (invalid-name)
src/accounts/models.py:346:32: E1101: Instance of 'File' has no 'url' member (no-member)
src/accounts/models.py:420:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:489:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:611:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:743:12: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
src/accounts/models.py:744:12: C0103: Variable name "ip" doesn't conform to snake_case naming style (invalid-name)
src/accounts/models.py:740:4: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
src/accounts/models.py:829:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:883:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/accounts/models.py:939:11: E1101: Instance of 'User' has no 'profile' member (no-member)
src/accounts/models.py:940:32: E1101: Instance of 'User' has no 'profile' member (no-member)
************* Module src.accounts.context_processors
src/accounts/context_processors.py:8:4: W0621: Redefining name 'signin_form' from outer scope (line 6) (redefined-outer-name)
************* Module src.accounts.admin
src/accounts/admin.py:240:4: W0221: Number of parameters was 4 in 'BaseModelAdmin.formfield_for_dbfield' and is now 3 in overridden 'TeamAdmin.formfield_for_dbfield' method (arguments-differ)
src/accounts/admin.py:290:4: W0221: Number of parameters was 4 in 'BaseModelAdmin.formfield_for_dbfield' and is now 3 in overridden 'TeamMemberAdmin.formfield_for_dbfield' method (arguments-differ)
************* Module src.accounts.utils
src/accounts/utils.py:12:1: W0511: TODO: Expand django.contrib.auth.models.User and move methods there (fixme)
************* Module src.accounts.urls
src/accounts/urls.py:57:0: C0301: Line too long (110/100) (line-too-long)
************* Module src.accounts.views
src/accounts/views.py:1:0: C0302: Too many lines in module (1253/1000) (too-many-lines)
src/accounts/views.py:148:4: W0612: Unused variable 'country' (unused-variable)
src/accounts/views.py:363:4: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
src/accounts/views.py:365:19: E0602: Undefined variable 'geo' (undefined-variable)
src/accounts/views.py:363:4: W0612: Unused variable 'g' (unused-variable)
src/accounts/views.py:365:4: W0612: Unused variable 'country_code' (unused-variable)
src/accounts/views.py:488:4: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
src/accounts/views.py:488:4: W0612: Unused variable 'g' (unused-variable)
src/accounts/views.py:489:4: W0612: Unused variable 'ip_addr' (unused-variable)
src/accounts/views.py:553:4: E1111: Assigning result of a function call, where the function has no return (assignment-from-no-return)
src/accounts/views.py:553:15: E1123: Unexpected keyword argument 'next_page' in function call (unexpected-keyword-arg)
src/accounts/views.py:580:8: W0612: Unused variable 'privacy_general' (unused-variable)
src/accounts/views.py:580:25: W0612: Unused variable 'created' (unused-variable)
src/accounts/views.py:581:8: W0612: Unused variable 'privacy_members' (unused-variable)
src/accounts/views.py:582:8: W0612: Unused variable 'privacy_admins' (unused-variable)
src/accounts/views.py:790:25: W0612: Unused variable 'created' (unused-variable)
src/accounts/views.py:1015:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/accounts/views.py:1134:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/accounts/views.py:1191:11: E0602: Undefined variable 'render_to_pdf' (undefined-variable)
************* Module src.accounts.templatetags.accounttags
src/accounts/templatetags/accounttags.py:90:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/accounts/templatetags/accounttags.py:112:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/accounts/templatetags/accounttags.py:32:0: R0911: Too many return statements (8/6) (too-many-return-statements)
src/accounts/templatetags/accounttags.py:32:0: R0912: Too many branches (13/12) (too-many-branches)
************* Module src.api.v1.serializers
src/api/v1/serializers.py:17:0: W0223: Method 'create' is abstract in class 'BaseSerializer' but is not overridden (abstract-method)
src/api/v1/serializers.py:17:0: W0223: Method 'update' is abstract in class 'BaseSerializer' but is not overridden (abstract-method)
src/api/v1/serializers.py:87:4: W0237: Parameter 'dictionary' has been renamed to 'obj' in overridden 'AutocompleteMemberSerializer.get_value' method (arguments-renamed)
************* Module src.api.v1.views
src/api/v1/views.py:49:19: W0612: Unused variable 'created' (unused-variable)
src/api/v1/views.py:99:0: R0901: Too many ancestors (11/7) (too-many-ancestors)
src/api/v1/views.py:105:25: W0613: Unused argument 'queryset' (unused-argument)
src/api/v1/views.py:122:8: C0103: Variable name "q" doesn't conform to snake_case naming style (invalid-name)
src/api/v1/views.py:125:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/api/v1/views.py:144:15: E1120: No value for argument 'request' in method call (no-value-for-parameter)
src/api/v1/views.py:148:15: E1120: No value for argument 'request' in method call (no-value-for-parameter)
src/api/v1/views.py:152:15: E1120: No value for argument 'request' in method call (no-value-for-parameter)
src/api/v1/views.py:156:15: E1120: No value for argument 'request' in method call (no-value-for-parameter)
src/api/v1/views.py:160:15: E1120: No value for argument 'request' in method call (no-value-for-parameter)
src/api/v1/views.py:164:8: W0107: Unnecessary pass statement (unnecessary-pass)
src/api/v1/views.py:168:8: W0107: Unnecessary pass statement (unnecessary-pass)
************* Module src.api.v1.organizations.serializers
src/api/v1/organizations/serializers.py:5:0: E0401: Unable to import 'organizations.models' (import-error)
************* Module src.api.v1.organizations.views
src/api/v1/organizations/views.py:695:0: C0301: Line too long (119/100) (line-too-long)
src/api/v1/organizations/views.py:74:8: W0621: Redefining name 'staff_member_order' from outer scope (line 124) (redefined-outer-name)
src/api/v1/organizations/views.py:95:36: E0602: Undefined variable 'e' (undefined-variable)
src/api/v1/organizations/views.py:425:8: W0612: Unused variable 'group' (unused-variable)
************* Module src.api.v1.home.views
src/api/v1/home/views.py:154:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
src/api/v1/home/views.py:4:0: W0611: Unused User imported from django.contrib.auth.models (unused-import)
************* Module src.api.v1.events.utils
src/api/v1/events/utils.py:24:8: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
************* Module src.api.v1.events.views
src/api/v1/events/views.py:1:0: C0302: Too many lines in module (1441/1000) (too-many-lines)
src/api/v1/events/views.py:596:23: W0612: Unused variable 'created' (unused-variable)
src/api/v1/events/views.py:755:4: R0911: Too many return statements (7/6) (too-many-return-statements)
src/api/v1/events/views.py:979:4: R0911: Too many return statements (7/6) (too-many-return-statements)
src/api/v1/events/views.py:1213:4: R0911: Too many return statements (7/6) (too-many-return-statements)
src/api/v1/events/views.py:1308:20: W0612: Unused variable 'created' (unused-variable)
src/api/v1/events/views.py:1342:4: R0911: Too many return statements (7/6) (too-many-return-statements)
************* Module src.api.v1.invites.views
src/api/v1/invites/views.py:51:0: C0301: Line too long (106/100) (line-too-long)
src/api/v1/invites/views.py:92:0: C0301: Line too long (106/100) (line-too-long)
src/api/v1/invites/views.py:48:4: R0914: Too many local variables (16/15) (too-many-locals)
src/api/v1/invites/views.py:48:4: R0911: Too many return statements (8/6) (too-many-return-statements)
src/api/v1/invites/views.py:146:12: W0612: Unused variable 'vals' (unused-variable)
src/api/v1/invites/views.py:192:16: W0612: Unused variable 'created' (unused-variable)
src/api/v1/invites/views.py:358:27: W0612: Unused variable 'created' (unused-variable)
src/api/v1/invites/views.py:372:12: W0612: Unused variable 'org_staff_member' (unused-variable)
************* Module src.api.v2.urls
src/api/v2/urls.py:2:0: W0611: Unused include imported from django.urls (unused-import)
src/api/v2/urls.py:2:0: W0611: Unused re_path imported from django.urls (unused-import)
src/api/v2/urls.py:6:0: W0611: Unused import views (unused-import)
************* Module src.events.tasks
src/events/tasks.py:55:0: C0301: Line too long (162/100) (line-too-long)
src/events/tasks.py:122:0: C0301: Line too long (157/100) (line-too-long)
************* Module src.events.models
src/events/models.py:442:0: C0301: Line too long (109/100) (line-too-long)
src/events/models.py:485:0: C0301: Line too long (102/100) (line-too-long)
src/events/models.py:531:0: C0301: Line too long (148/100) (line-too-long)
src/events/models.py:580:0: C0301: Line too long (163/100) (line-too-long)
src/events/models.py:581:0: C0301: Line too long (148/100) (line-too-long)
src/events/models.py:675:0: C0301: Line too long (128/100) (line-too-long)
src/events/models.py:720:0: C0301: Line too long (102/100) (line-too-long)
src/events/models.py:1236:0: C0301: Line too long (103/100) (line-too-long)
src/events/models.py:1:0: C0302: Too many lines in module (1730/1000) (too-many-lines)
src/events/models.py:63:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/events/models.py:183:0: R0901: Too many ancestors (11/7) (too-many-ancestors)
src/events/models.py:414:32: E1101: Instance of 'File' has no 'url' member (no-member)
src/events/models.py:425:8: W0702: No exception type(s) specified (bare-except)
src/events/models.py:851:38: E1101: Instance of 'TimeZoneField' has no 'localize' member (no-member)
src/events/models.py:1004:0: R0903: Too few public methods (1/2) (too-few-public-methods)
src/events/models.py:1058:58: E1101: Instance of 'Role' has no 'title' member (no-member)
src/events/models.py:1062:15: E1101: Instance of 'Role' has no 'title' member (no-member)
src/events/models.py:1335:12: W0612: Unused variable 'participation' (unused-variable)
src/events/models.py:1382:12: W0612: Unused variable 'participation' (unused-variable)
src/events/models.py:1404:12: W0612: Unused variable 'participation' (unused-variable)
src/events/models.py:1474:12: W0612: Unused variable 'participation' (unused-variable)
src/events/models.py:1510:11: E1101: Instance of 'User' has no 'profile' member (no-member)
src/events/models.py:1511:32: E1101: Instance of 'User' has no 'profile' member (no-member)
src/events/models.py:1130:0: R0904: Too many public methods (39/20) (too-many-public-methods)
************* Module src.events.helpers
src/events/helpers.py:24:12: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
************* Module src.events.views
src/events/views.py:1:0: C0302: Too many lines in module (1129/1000) (too-many-lines)
src/events/views.py:169:4: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
src/events/views.py:170:4: C0103: Variable name "ip" doesn't conform to snake_case naming style (invalid-name)
src/events/views.py:172:4: W0612: Unused variable 'country' (unused-variable)
src/events/views.py:506:0: R0914: Too many local variables (17/15) (too-many-locals)
src/events/views.py:522:4: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
src/events/views.py:523:4: C0103: Variable name "ip" doesn't conform to snake_case naming style (invalid-name)
src/events/views.py:536:17: R1719: The if expression can be replaced with 'not test' (simplifiable-if-expression)
src/events/views.py:614:0: R0914: Too many local variables (17/15) (too-many-locals)
src/events/views.py:614:0: R0912: Too many branches (15/12) (too-many-branches)
src/events/views.py:899:17: R1719: The if expression can be replaced with 'not test' (simplifiable-if-expression)
src/events/views.py:1010:20: R0916: Too many boolean expressions in if statement (6/5) (too-many-boolean-expressions)
src/events/views.py:875:0: R0912: Too many branches (14/12) (too-many-branches)
************* Module src.events.decorators
src/events/decorators.py:27:12: W0612: Unused variable 'event' (unused-variable)
src/events/decorators.py:88:20: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/events/decorators.py:117:20: E1131: unsupported operand type(s) for | (unsupported-binary-operation)
src/events/decorators.py:86:16: W0612: Unused variable 'event' (unused-variable)
************* Module setup
setup.py:17:5: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
setup.py:18:4: W0105: String statement has no effect (pointless-string-statement)
setup.py:27:9: C0103: Variable name "p" doesn't conform to snake_case naming style (invalid-name)
setup.py:27:12: W0612: Unused variable 'directories' (unused-variable)
setup.py:1:0: R0801: Similar lines in 2 files
==src.settings.base:[209:252]
==src.settings.local:[87:130]
LOGGING = {
    "version":                      1,
    "disable_existing_loggers":     False,
    "filters": {
        "require_debug_false": {
            "()":                   "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()":                   "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "simple": {
            "format":               "[%(asctime)s] %(levelname)s %(message)s",
            "datefmt":              "%Y-%m-%d %H:%M:%S",
        },
        "verbose": {
            "format":               "[%(asctime)s] %(levelname)s "
                                    "[%(name)s.%(funcName)s:%(lineno)d] "
                                    "%(message)s",
            "datefmt":              "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level":                "INFO",
            "filters": [
                "require_debug_true",
            ],
            "class":                "logging.StreamHandler",
            "formatter":            "simple",
        },
        "null": {
            "class":                "logging.NullHandler",
        },
        "mail_admins": {
            "level":                "ERROR",
            "filters": [
                "require_debug_false",
            ],
            "class":                "django.utils.log.AdminEmailHandler",
            "formatter":            "verbose",
        }, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.utils:[20:40]
==src.organizations.decorators:[98:117]
        Organization,
        Q(is_hidden=False) |
        Q(
            Q(pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True
                )) |
            Q(pk__in=request.user
                .organization_group_members
                .all().values_list(
                    "organization_id", flat=True
                )),
            is_hidden=True,
        ),
        id=organization_id,
        is_deleted=False,
        )
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[22:41]
==src.events.decorators:[115:133]
                    Event,
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user
                            .organization_group_members.all().values_list(
                                "organization_id", flat=True
                            )),
                        organization__is_hidden=True,
                    ),
                    id=event_id,
                    ) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1133:1151]
==src.events.helpers:[23:41]
            Q(organization=None) |
            Q(organization__is_hidden=False) |
            Q(
                Q(organization__pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )) |
                Q(organization__pk__in=request.user
                    .organization_group_members
                    .all().values_list(
                        "organization_id", flat=True
                    )),
                organization__is_hidden=True,
            ),
        )
    else: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[227:254]
==src.organizations.forms:[134:159]
        if self.cleaned_data["contact"] == "me":
            self.cleaned_data["is_alt_person"] = False
        else:
            self.cleaned_data["is_alt_person"] = True

            if not self.cleaned_data["alt_person_fullname"]:
                self._errors["alt_person_fullname"] = self.error_class(
                    [_("This Field is required.")])

                del self.cleaned_data["alt_person_fullname"]

            if not self.cleaned_data["alt_person_email"]:
                self._errors["alt_person_email"] = self.error_class(
                    [_("This Field is required.")])

                del self.cleaned_data["alt_person_email"]

            if (
                    "alt_person_phone" in self.cleaned_data and
                    not self.cleaned_data["alt_person_phone"]):
                self._errors["alt_person_phone"] = self.error_class(
                    [_("This Field is required.")])

                del self.cleaned_data["alt_person_phone"]

        # ---------------------------------------------------------------------
        # --- Validate `recurrence` Field (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.decorators:[87:103]
==src.events.helpers:[23:39]
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user
                            .organization_group_members
                            .all().values_list(
                                "organization_id", flat=True
                            )),
                        organization__is_hidden=True,
                    ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[936:952]
==src.organizations.views:[160:176]
            Q(is_hidden=False) |
            Q(
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )) |
                Q(pk__in=request.user
                    .organization_group_members
                    .all().values_list(
                        "organization_id", flat=True
                    )),
                is_hidden=True,
            ),
            is_deleted=False, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[914:930]
==src.organizations.views:[78:94]
            Q(is_hidden=False) |
            Q(
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )) |
                Q(pk__in=request.user
                    .organization_group_members
                    .all().values_list(
                        "organization_id", flat=True
                    )),
                is_hidden=True,
            ),
            is_deleted=False, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.models:[860:900]
==src.organizations.models:[330:370]
        try:
            ping_google()
        except Exception as exc:
            print(f"### EXCEPTION : {type(exc).__name__} : {str(exc)}")

        # ---------------------------------------------------------------------
        # --- Update/insert SEO Model Instance Metadata
        update_seo_model_instance_metadata(
            title=self.title,
            description=self.description,
            keywords=", ".join(self.tags.names()),
            heading=self.title,
            path=self.get_absolute_url(),
            object_id=self.id,
            content_type_id=ContentType.objects.get_for_model(self).id)

        # ---------------------------------------------------------------------
        # --- The Path for uploading Avatar Images is:
        #
        #            MEDIA_ROOT/organizations/<id>/avatars/<filename>
        #
        # --- As long as the uploading Path is being generated before
        #     the Organization Instance gets assigned with the unique ID,
        #     the uploading Path for the brand new Organization looks like:
        #
        #            MEDIA_ROOT/organizations/None/avatars/<filename>
        #
        # --- To fix this:
        #     1. Open the Avatar File in the Path;
        #     2. Assign the Avatar File Content to the Organization Avatar Object;
        #     3. Save the Organization Instance. Now the Avatar Image in the
        #        correct Path;
        #     4. Delete previous Avatar File;
        #
        if created:
            avatar = File(storage.open(self.avatar.file.name, "rb"))

            self.avatar = avatar
            self.save()
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.invites.views:[117:133]
==src.events.decorators:[44:59]
                Event,
                Q(
                    Q(organization=None) &
                    Q(author=request.user),
                ) |
                Q(
                    Q(organization__pk__in=OrganizationStaff
                        .objects.filter(
                            member=request.user,
                        ).values_list(
                            "organization_id", flat=True
                        )),
                ),
                id=event_id,
                )
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.utils:[21:36]
==src.organizations.views:[78:93]
            Q(is_hidden=False) |
            Q(
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )) |
                Q(pk__in=request.user
                    .organization_group_members
                    .all().values_list(
                        "organization_id", flat=True
                    )),
                is_hidden=True,
            ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.invites.views:[117:130]
==src.events.decorators:[27:40]
                Event,
                Q(
                    Q(organization=None) &
                    Q(author=request.user),
                ) |
                Q(
                    Q(organization__pk__in=OrganizationStaff
                        .objects.filter(
                            member=request.user,
                        ).values_list(
                            "organization_id", flat=True
                        )),
                ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.blog.views:[30:75]
==src.api.v1.events.views:[48:93]
    permission_classes = (AllowAny, )
    renderer_classes = (JSONRenderer, )
    # serializer_class = PostSerializer
    # model = Post

    def get(self, request):
        """GET: Events upcoming.

            Receive:

            Return:

                status                  200/400/404/500

            Example Payload:

                {}
        """
        # ---------------------------------------------------------------------
        # --- Initials.
        # ---------------------------------------------------------------------
        data = []

        # ---------------------------------------------------------------------
        # --- Retrieve Data from the Request
        # ---------------------------------------------------------------------
        year = request.GET.get("year", "")
        month = request.GET.get("month", "")

        # ---------------------------------------------------------------------
        # --- Handle Errors
        # ---------------------------------------------------------------------
        if not year:
            return Response({
                "message":      _("No Year provided."),
            }, status=status.HTTP_400_BAD_REQUEST)

        if not month:
            return Response({
                "message":      _("No Month provided."),
            }, status=status.HTTP_400_BAD_REQUEST)

        # ---------------------------------------------------------------------
        # --- Filter QuerySet by the Calendar specified Year & Month
        # --------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.admin:[274:288]
==src.organizations.admin:[183:197]
        ),
        "Invite Events": (
            "invite-created",
            "invite-accepted",
            "invite-rejected",
            "invite-revoked",
        ),
        "Complaint Events": (
            "complaint-created",
            "complaint-processed",
            "complaint-deleted",
        ),
    }
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.search_indexes:[21:37]
==src.organizations.search_indexes:[16:32]
    text = indexes.CharField(
        document=True,
        use_template=True)
    rendered = indexes.CharField(
        use_template=True,
        indexed=False)

    # -------------------------------------------------------------------------
    author = indexes.CharField(
        model_attr="author")
    name = indexes.CharField(
        model_attr="name")
    description = indexes.CharField(
        model_attr="description",
        default="")
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[22:33]
==src.events.decorators:[86:97]
                    Event,
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.templatetags.accounttags:[112:123]
==src.organizations.views:[80:91]
            Q(pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True
                )) |
            Q(pk__in=request.user
                .organization_group_members
                .all().values_list(
                    "organization_id", flat=True
                )), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.organizations.decorators:[74:85]
==src.organizations.views:[82:93]
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(pk__in=request.user
                            .organization_group_members
                            .all().values_list(
                                "organization_id", flat=True
                            )),
                        is_hidden=True,
                    ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[172:183]
==src.organizations.forms:[104:115]
                }),
            "alt_person_fullname": forms.TextInput(
                attrs={
                    "class":        "form-control",
                    "placeholder":  _("Full Name"),
                    "maxlength":    80,
                }),
            "alt_person_email": forms.EmailInput(
                attrs={
                    "class":        "form-control",
                    "placeholder":  _("Email"), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.decorators:[116:126]
==src.events.helpers:[23:33]
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[56:74]
==src.api.v1.invites.views:[116:134]
            event = get_object_or_None(
                Event,
                Q(
                    Q(organization=None) &
                    Q(author=request.user),
                ) |
                Q(
                    Q(organization__pk__in=OrganizationStaff
                        .objects.filter(
                            member=request.user,
                        ).values_list(
                            "organization_id", flat=True
                        )),
                ),
                id=event_id,
                )

            if not event: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1133:1143]
==src.api.v1.events.utils:[23:33]
        Q(organization=None) |
        Q(organization__is_hidden=False) |
        Q(
            Q(organization__pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True
                )) |
            Q(organization__pk__in=request.user (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.admin:[25:35]
==src.events.admin:[172:182]
            ),
        }),
        ("Tags", {
            "classes":  (
                "grp-collapse grp-open",
            ),
            "fields":   (
                ("tags", "hashtag"),
            ),
        }), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.admin:[59:69]
==src.app.admin:[239:249]
        "created", "modified",
    ]
    list_display_links = [
        "user",
    ]
    list_filter = [
        ("created", DateRangeFilter),
        ("modified", DateRangeFilter),
    ]
    search_fields = [ (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[197:228]
==src.organizations.models:[340:376]
            keywords=", ".join(self.tags.names()),
            heading=self.title,
            path=self.get_absolute_url(),
            object_id=self.id,
            content_type_id=ContentType.objects.get_for_model(self).id)

        # ---------------------------------------------------------------------
        # --- The Path for uploading Avatar Images is:
        #
        #            MEDIA_ROOT/blog/<id>/avatars/<filename>
        #
        # --- As long as the uploading Path is being generated before
        #     the Blog Instance gets assigned with the unique ID,
        #     the uploading Path for the brand new Blog looks like:
        #
        #            MEDIA_ROOT/blog/None/avatars/<filename>
        #
        # --- To fix this:
        #     1. Open the Avatar File in the Path;
        #     2. Assign the Avatar File Content to the Blog Avatar Object;
        #     3. Save the Blog Instance. Now the Avatar Image in the
        #        correct Path;
        #     4. Delete previous Avatar File;
        #
        if created:
            avatar = File(storage.open(self.avatar.file.name, "rb"))

            self.avatar = avatar
            self.save()

            storage.delete(avatar.file.name) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[57:73]
==src.events.decorators:[44:59]
                Event,
                Q(
                    Q(organization=None) &
                    Q(author=request.user),
                ) |
                Q(
                    Q(organization__pk__in=OrganizationStaff
                        .objects.filter(
                            member=request.user,
                        ).values_list(
                            "organization_id", flat=True
                        )),
                ),
                id=event_id,
                ) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[57:70]
==src.events.decorators:[27:40]
                Event,
                Q(
                    Q(organization=None) &
                    Q(author=request.user),
                ) |
                Q(
                    Q(organization__pk__in=OrganizationStaff
                        .objects.filter(
                            member=request.user,
                        ).values_list(
                            "organization_id", flat=True
                        )),
                ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[197:227]
==src.events.models:[870:900]
            keywords=", ".join(self.tags.names()),
            heading=self.title,
            path=self.get_absolute_url(),
            object_id=self.id,
            content_type_id=ContentType.objects.get_for_model(self).id)

        # ---------------------------------------------------------------------
        # --- The Path for uploading Avatar Images is:
        #
        #            MEDIA_ROOT/blog/<id>/avatars/<filename>
        #
        # --- As long as the uploading Path is being generated before
        #     the Blog Instance gets assigned with the unique ID,
        #     the uploading Path for the brand new Blog looks like:
        #
        #            MEDIA_ROOT/blog/None/avatars/<filename>
        #
        # --- To fix this:
        #     1. Open the Avatar File in the Path;
        #     2. Assign the Avatar File Content to the Blog Avatar Object;
        #     3. Save the Blog Instance. Now the Avatar Image in the
        #        correct Path;
        #     4. Delete previous Avatar File;
        #
        if created:
            avatar = File(storage.open(self.avatar.file.name, "rb"))

            self.avatar = avatar
            self.save()
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.forms:[46:64]
==src.home.forms:[87:105]
                }),
            }

    def clean(self):
        """Docstring."""
        cleaned_data = super().clean()

        return cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)
        instance.author = self.user

        if commit:
            instance.save()

        return instance (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.utils:[58:68]
==src.organizations.decorators:[37:46]
        Q(pk__in=OrganizationStaff
            .objects.filter(
                member=request.user,
            ).values_list(
                "organization_id", flat=True
            )),
        id=organization_id,
        is_deleted=False,
        )
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.templatetags.accounttags:[114:123]
==src.organizations.decorators:[74:83]
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(pk__in=request.user
                            .organization_group_members
                            .all().values_list(
                                "organization_id", flat=True
                            )), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.invites.admin:[67:78]
==src.organizations.admin:[263:274]
    ]

    papertrail_type_filters = {
        "Invite Events": (
            "invite-created",
            "invite-accepted",
            "invite-rejected",
            "invite-revoked",
        ),
    }
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.models:[901:926]
==src.organizations.models:[370:405]
            storage.delete(avatar.file.name)

    def pre_delete(self, **kwargs):
        """Docstring."""
        # ---------------------------------------------------------------------
        # --- Remove related Invites, if any.
        try:
            content_type = ContentType.objects.get_for_model(self)

            related_invites = Invite.objects.filter(
                content_type=content_type,
                object_id=self.id)
            related_invites.delete()

        except Exception as exc:
            print(f"### EXCEPTION : {type(exc).__name__} : {str(exc)}")

    def post_delete(self, **kwargs):
        """Docstring."""


# -----------------------------------------------------------------------------
# --- Organization Model Mixin.
# -----------------------------------------------------------------------------


# =============================================================================
# ===
# === ORGANIZATION STAFF
# ===
# =============================================================================

# -----------------------------------------------------------------------------
# --- Organization Staff Manager.
# ----------------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[87:99]
==src.organizations.models:[87:99]
    tags = TaggableManager(
        through=None, blank=True,
        verbose_name=_("Tags"),
        help_text=_("A comma-separated List of Tags."))
    hashtag = models.CharField(
        db_index=True,
        max_length=80, null=True, blank=True,
        verbose_name=_("Hashtag"),
        help_text=_("Hashtag"))

    # -------------------------------------------------------------------------
    # --- Flags (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.search_indexes:[17:27]
==src.events.search_indexes:[21:31]
    text = indexes.CharField(
        document=True,
        use_template=True)
    rendered = indexes.CharField(
        use_template=True,
        indexed=False)

    # -------------------------------------------------------------------------
    author = indexes.CharField(
        model_attr="author") (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.app.forms:[238:251]
==src.events.forms:[349:362]
        self.user = kwargs.pop("user", None)

        super().__init__(*args, **kwargs)

        if self.instance and self.instance.id:
            pass

    class Media:
        js = formset_media_js + (
            # Other form media here
        )

    class Meta: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.forms:[377:399]
==src.app.forms:[160:184]
                }),
            }

    def clean(self):
        """Docstring."""
        cleaned_data = super().clean()

        return cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)

        if commit:
            instance.save()

        return instance


# =============================================================================
# ===
# === NEWSLETTER CREATE FORM
# ===
# ============================================================================= (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.forms:[198:220]
==src.app.forms:[94:118]
                }),
            }

    def clean(self):
        """Docstring."""
        cleaned_data = super().clean()

        return cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)

        if commit:
            instance.save()

        return instance


# -----------------------------------------------------------------------------
# --- USER PROFILE EDIT FORM
# ----------------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.app.forms:[209:233]
==src.home.forms:[88:105]
            }

    def clean(self):
        """Docstring."""
        cleaned_data = super().clean()

        return cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)
        instance.author = self.user

        if commit:
            instance.save()

        return instance (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.admin:[15:23]
==src.organizations.admin:[99:107]
    fieldsets = (
        ("", {
            "classes":  (""),
            "fields":   (
                "author",
                ("avatar", "image_tag",),
                "title",
                "description", (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[157:165]
==src.organizations.forms:[81:89]
                }),
            "tags": TagWidget(),
            "hashtag": forms.TextInput(
                attrs={
                    "class":        "form-control",
                    "placeholder":  _("Hashtag"),
                    "maxlength":    80,
                }), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.home.search_indexes:[14:24]
==src.organizations.search_indexes:[16:26]
    text = indexes.CharField(
        document=True,
        use_template=True)
    rendered = indexes.CharField(
        use_template=True,
        indexed=False)

    # -------------------------------------------------------------------------
    author = indexes.CharField(
        model_attr="author") (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.invites.views:[149:163]
==src.api.v1.organizations.utils:[55:69]
    organization = get_object_or_None(
        Organization,
        Q(author=request.user) |
        Q(pk__in=OrganizationStaff
            .objects.filter(
                member=request.user,
            ).values_list(
                "organization_id", flat=True
            )),
        id=organization_id,
        is_deleted=False,
        )

    if not organization: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1079:1086]
==src.events.models:[1719:1726]
            event__status__in=[
                EventStatus.UPCOMING,
                EventStatus.COMPLETE,
            ],
            status__in=[
                ParticipationStatus.CONFIRMATION_DENIED,
                ParticipationStatus.CANCELLED_BY_ADMIN, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1175:1185]
==src.events.models:[1688:1696]
            event__status=EventStatus.COMPLETE,
            status__in=[
                ParticipationStatus.WAITING_FOR_SELFREFLECTION,
                ParticipationStatus.WAITING_FOR_ACKNOWLEDGEMENT,
                ParticipationStatus.ACKNOWLEDGED,
            ]
        )
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.models:[347:398]
==src.blog.models:[173:194]
        return "(Sin Imagen)"

    image_tag.short_description = "Avatar"
    image_tag.allow_tags = True

    # -------------------------------------------------------------------------
    # --- Signals.
    def pre_save(self, **kwargs):
        """Docstring."""

    def post_save(self, created, **kwargs):
        """Docstring."""
        # ---------------------------------------------------------------------
        # --- Ping Google.
        try:
            ping_google()
        except Exception as exc:
            # -----------------------------------------------------------------
            # --- Logging.
            print(f"### EXCEPTION : {type(exc).__name__} : {str(exc)}")

        # ---------------------------------------------------------------------
        # --- Update/insert SEO Model Instance Metadata.
        # update_seo_model_instance_metadata(
        #     title=self.user.get_full_name(),
        #     description=self.bio,
        #     keywords=self.nickname,
        #     heading=self.user.get_full_name(),
        #     path=self.get_absolute_url(),
        #     object_id=self.id,
        #     content_type_id=ContentType.objects.get_for_model(self).id,
        # )

        # ---------------------------------------------------------------------
        # --- The Path for uploading Avatar Images is:
        #
        #            MEDIA_ROOT/accounts/<id>/avatars/<filename>
        #
        # --- As long as the uploading Path is being generated before
        #     the Profile Instance gets assigned with the unique ID,
        #     the uploading Path for the brand new Profile looks like:
        #
        #            MEDIA_ROOT/accounts/None/avatars/<filename>
        #
        # --- To fix this:
        #     1. Open the Avatar File in the Path;
        #     2. Assign the Avatar File Content to the Profile Avatar Object;
        #     3. Save the Profile Instance. Now the Avatar Image in the
        #        correct Path;
        #     4. Delete previous Avatar File;
        # (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.app.forms:[280:295]
==src.events.forms:[399:414]
        except Exception as exc:
            print(f"### EXCEPTION : {type(exc).__name__} : {str(exc)}")

        return self.cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)

        if commit:
            instance.save()

        return instance

 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.app.admin:[339:346]
==src.home.admin:[90:97]
    ]
    list_filter = [
        "author",
        ("created", DateRangeFilter),
        ("modified", DateRangeFilter),
    ]
    search_fields = [ (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.forms:[443:458]
==src.home.forms:[85:99]
                attrs={
                    "class":        "form-control selectpicker",
                }),
            }

    def clean(self):
        """Docstring."""
        cleaned_data = super().clean()

        return cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.settings.base:[262:269]
==src.settings.local:[159:166]
            ],
            "level":                "ERROR",
            "propagate":            False,
        },
        "py.warnings": {
            "handlers": [
                "console", (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.views:[960:972]
==src.organizations.views:[549:561]
                        )

                tmp_file.delete()

            # -----------------------------------------------------------------
            # --- Save URLs and Video URLs and pull their Titles.
            for link in request.POST["tmp_links"].split():
                url = validate_url(link)

                if get_youtube_video_id(link):
                    AttachedVideoUrl.objects.create(
                        url=link, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.views:[940:951]
==src.organizations.views:[529:540]
                social_link.save()

            # -----------------------------------------------------------------
            # --- Move temporary Files to real Organization Images/Documents.
            for tmp_file in form.cleaned_data["tmp_files"]:
                mime_type = mimetypes.guess_type(tmp_file.file.name)[0]

                if mime_type in settings.UPLOADER_SETTINGS["images"]["CONTENT_TYPES"]:
                    AttachedImage.objects.create(
                        name=tmp_file.name,
                        image=File(storage.open(tmp_file.file.name, "rb")), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.admin:[84:91]
==src.organizations.admin:[35:42]
    classes = [
        "grp-collapse grp-closed",
    ]
    inline_classes = [
        "grp-collapse grp-closed",
    ]
    exclude = [ (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.forms:[40:47]
==src.organizations.forms:[82:89]
            "tags": TagWidget(),
            "hashtag": forms.TextInput(
                attrs={
                    "class":        "form-control",
                    "placeholder":  _("Hashtag"),
                    "maxlength":    80,
                }), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.decorators:[32:38]
==src.events.helpers:[25:31]
            Q(
                Q(organization__pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.views:[174:182]
==src.api.v1.invites.views:[130:138]
                id=event_id,
                )

            if not event:
                return Response({
                    "message":      _("Event not found."),
                }, status=status.HTTP_404_NOT_FOUND)
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.events.utils:[25:31]
==src.api.v1.invites.views:[122:128]
        Q(
            Q(organization__pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.views:[349:356]
==src.api.v1.views:[130:137]
            queryset,
            many=True,
            context={
                "request":  request,
            },
        ).data
 (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.templatetags.accounttags:[111:117]
==src.api.v1.invites.views:[151:157]
            Q(author=request.user) |
            Q(pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1133:1143]
==src.events.decorators:[116:126]
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1133:1149]
==src.events.decorators:[87:103]
                    Q(organization=None) |
                    Q(organization__is_hidden=False) |
                    Q(
                        Q(organization__pk__in=OrganizationStaff
                            .objects.filter(
                                member=request.user,
                            ).values_list(
                                "organization_id", flat=True
                            )) |
                        Q(organization__pk__in=request.user
                            .organization_group_members
                            .all().values_list(
                                "organization_id", flat=True
                            )),
                        organization__is_hidden=True,
                    ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1066:1072]
==src.events.models:[1703:1709]
        event__status__in=[
            EventStatus.UPCOMING,
            EventStatus.COMPLETE,
        ],
        status__in=[
            ParticipationStatus.CANCELLED_BY_USER, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1135:1141]
==src.api.v1.events.utils:[62:68]
            Q(
                Q(organization__pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.forms:[299:318]
==src.events.forms:[325:344]
            }

    def clean(self):
        """Docstring."""
        return self.cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)

        if commit:
            instance.save()

        return instance


# -----------------------------------------------------------------------------
# --- RESET PASSWORD FORM
# ----------------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[170:188]
==src.events.models:[412:423]
        if self.avatar:
            return f"<img src='{self.avatar.url}' width='100' height='60' />"

        return "(Sin Imagen)"

    image_tag.short_description = "Avatar"
    image_tag.allow_tags = True

    # -------------------------------------------------------------------------
    # --- Signals
    def pre_save(self, **kwargs):
        """Docstring."""

    def post_save(self, created, **kwargs):
        """Docstring."""
        # ---------------------------------------------------------------------
        # --- Ping Google
        try: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.decorators:[58:81]
==src.organizations.decorators:[45:65]
                )
        else:
            raise Http404

        # ---------------------------------------------------------------------
        # --- Return from the Decorator.
        return func(request, *args, **kwargs)

    return _check


def organization_access_check_required(func):
    """Restrict Access to the Organization Details.

    Only for the Organization Staff and Group Members.
    """
    def _check(request, *args, **kwargs):
        # ---------------------------------------------------------------------
        # --- Retrieve the Organization.
        slug = kwargs.get("slug", "") (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.utils:[58:64]
==src.organizations.decorators:[25:31]
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.views:[1069:1076]
==src.organizations.views:[533:540]
            for tmp_file in form.cleaned_data["tmp_files"]:
                mime_type = mimetypes.guess_type(tmp_file.file.name)[0]

                if mime_type in settings.UPLOADER_SETTINGS["images"]["CONTENT_TYPES"]:
                    AttachedImage.objects.create(
                        name=tmp_file.name,
                        image=File(storage.open(tmp_file.file.name, "rb")), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.organizations.decorators:[99:114]
==src.organizations.views:[78:93]
            Q(is_hidden=False) |
            Q(
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True
                    )) |
                Q(pk__in=request.user
                    .organization_group_members
                    .all().values_list(
                        "organization_id", flat=True
                    )),
                is_hidden=True,
            ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.invites.admin:[70:76]
==src.organizations.admin:[184:190]
        "Invite Events": (
            "invite-created",
            "invite-accepted",
            "invite-rejected",
            "invite-revoked",
        ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.admin:[275:281]
==src.organizations.admin:[266:272]
        "Invite Events": (
            "invite-created",
            "invite-accepted",
            "invite-rejected",
            "invite-revoked",
        ), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[281:294]
==src.organizations.forms:[159:170]
        return self.cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)
        instance.author = self.user

        if commit:
            instance.save()

        return instance (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[116:122]
==src.organizations.forms:[47:53]
    tmp_files = forms.ModelMultipleChoiceField(
        widget=forms.widgets.MultipleHiddenInput,
        queryset=TemporaryFile.objects.all(),
        required=False,
    )
    tmp_links = forms.CharField( (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.forms:[66:79]
==src.organizations.forms:[29:39]
            ("he", _("Affiliate different Person")),
        ]
        self.fields["contact"].choices = self.contact_choices
        self.fields["contact"].initial = "me"

        if self.instance and self.instance.is_alt_person:
            self.fields["contact"].initial = "he"

        # ---------------------------------------------------------------------
        # --- Recurrence.

        # ---------------------------------------------------------------------
        # --- Date/Time. (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.search_indexes:[16:24]
==src.organizations.search_indexes:[16:24]
    text = indexes.CharField(
        document=True,
        use_template=True)
    rendered = indexes.CharField(
        use_template=True,
        indexed=False)

    # ------------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.models:[119:125]
==src.organizations.models:[111:117]
    phone_number = models.ForeignKey(
        Phone,
        db_index=True,
        on_delete=models.CASCADE,
        null=True, blank=True,
        verbose_name=_("Phone Numbers"), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.models:[112:118]
==src.organizations.models:[103:109]
    address = models.ForeignKey(
        Address,
        db_index=True,
        on_delete=models.CASCADE,
        null=True, blank=True,
        verbose_name=_("Address"), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[187:196]
==src.organizations.models:[330:339]
        try:
            ping_google()
        except Exception as exc:
            print(f"### EXCEPTION : {type(exc).__name__} : {str(exc)}")

        # ---------------------------------------------------------------------
        # --- Update/insert SEO Model Instance Metadata
        update_seo_model_instance_metadata(
            title=self.title, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.models:[1200:1205]
==src.invites.models:[108:113]
    date_accepted = models.DateField(
        db_index=True,
        null=True, blank=True,
        verbose_name=_("Date accepted"),
        help_text=_("Date accepted")) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.templatetags.accounttags:[111:117]
==src.api.v1.organizations.utils:[57:63]
            Q(author=request.user) |
            Q(pk__in=OrganizationStaff
                .objects.filter(
                    member=request.user,
                ).values_list(
                    "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[1054:1059]
==src.events.models:[1688:1693]
        event__status=EventStatus.COMPLETE,
        status__in=[
            ParticipationStatus.WAITING_FOR_SELFREFLECTION,
            ParticipationStatus.WAITING_FOR_ACKNOWLEDGEMENT,
            ParticipationStatus.ACKNOWLEDGED, (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.views:[916:921]
==src.api.v1.invites.views:[152:157]
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.app.forms:[219:233]
==src.events.forms:[285:294]
        instance = super().save(commit=False)
        instance.author = self.user

        if commit:
            instance.save()

        return instance


# =============================================================================
# ===
# === SOCIAL LINK FORM & FORMSET
# ===
# ============================================================================= (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.forms:[303:318]
==src.app.forms:[283:295]
        return self.cleaned_data

    def save(self, commit=True):
        """Docstring."""
        instance = super().save(commit=False)

        if commit:
            instance.save()

        return instance


# -----------------------------------------------------------------------------
# --- RESET PASSWORD FORM
# ----------------------------------------------------------------------------- (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.forms:[19:27]
==src.home.forms:[64:72]
        self.user = kwargs.pop("user", None)

        super().__init__(*args, **kwargs)

        if self.instance and self.instance.id:
            pass

    class Meta: (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.api.v1.organizations.utils:[58:63]
==src.organizations.decorators:[101:106]
        Q(pk__in=OrganizationStaff
            .objects.filter(
                member=request.user,
            ).values_list(
                "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.organizations.decorators:[37:42]
==src.organizations.views:[162:167]
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.organizations.decorators:[25:30]
==src.organizations.views:[80:85]
                Q(pk__in=OrganizationStaff
                    .objects.filter(
                        member=request.user,
                    ).values_list(
                        "organization_id", flat=True (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.home.forms:[98:105]
==src.organizations.forms:[163:170]
        instance = super().save(commit=False)
        instance.author = self.user

        if commit:
            instance.save()

        return instance (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.events.models:[308:313]
==src.organizations.models:[152:157]
    is_alt_person = models.BooleanField(
        default=False)
    alt_person_fullname = models.CharField(
        max_length=80, null=True, blank=True,
        verbose_name=_("Full Name"), (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.models:[399:406]
==src.organizations.models:[364:376]
            if created:
                avatar = File(storage.open(self.avatar.file.name, "rb"))

                self.avatar = avatar
                self.save()

                storage.delete(avatar.file.name) (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.accounts.models:[166:172]
==src.organizations.models:[601:607]
        if request:
            domain_name = request.get_host()
        else:
            domain_name = settings.DOMAIN_NAME

        url = reverse( (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.blog.models:[127:133]
==src.organizations.models:[195:201]
        if request:
            domain_name = request.get_host()
        else:
            domain_name = settings.DOMAIN_NAME

        url = reverse( (duplicate-code)
setup.py:1:0: R0801: Similar lines in 2 files
==src.home.models:[89:101]
==src.organizations.models:[250:268]
        if self.avatar:
            return f"<img src='{self.avatar.url}' width='100' height='60' />"

        return "(Sin Imagen)"

    image_tag.short_description = "Avatar"
    image_tag.allow_tags = True

    # -------------------------------------------------------------------------
    # --- Signals
    def pre_save(self, **kwargs):
        """Docstring.""" (duplicate-code)


Report
======
5068 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |171    |171        |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |224    |224        |=          |82.14       |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|method   |402    |402        |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|function |151    |151        |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+



20434 lines have been analyzed

Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |10052  |49.19 |10052    |=          |
+----------+-------+------+---------+-----------+
|docstring |3578   |17.51 |3579     |-1.00      |
+----------+-------+------+---------+-----------+
|comment   |3442   |16.84 |3442     |=          |
+----------+-------+------+---------+-----------+
|empty     |3362   |16.45 |3358     |+4.00      |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |0          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |67     |70       |70         |
+-----------+-------+---------+-----------+
|refactor   |143    |143      |143        |
+-----------+-------+---------+-----------+
|warning    |65     |65       |65         |
+-----------+-------+---------+-----------+
|error      |33     |33       |33         |
+-----------+-------+---------+-----------+



Messages
--------

+-------------------------------------+------------+
|message id                           |occurrences |
+=====================================+============+
|duplicate-code                       |94          |
+-------------------------------------+------------+
|unused-variable                      |30          |
+-------------------------------------+------------+
|line-too-long                        |26          |
+-------------------------------------+------------+
|invalid-name                         |25          |
+-------------------------------------+------------+
|too-few-public-methods               |15          |
+-------------------------------------+------------+
|no-member                            |11          |
+-------------------------------------+------------+
|unused-argument                      |9           |
+-------------------------------------+------------+
|unsupported-binary-operation         |9           |
+-------------------------------------+------------+
|consider-using-f-string              |9           |
+-------------------------------------+------------+
|too-many-return-statements           |6           |
+-------------------------------------+------------+
|unused-import                        |5           |
+-------------------------------------+------------+
|too-many-lines                       |5           |
+-------------------------------------+------------+
|no-value-for-parameter               |5           |
+-------------------------------------+------------+
|undefined-variable                   |4           |
+-------------------------------------+------------+
|too-many-locals                      |4           |
+-------------------------------------+------------+
|too-many-ancestors                   |4           |
+-------------------------------------+------------+
|simplifiable-if-expression           |4           |
+-------------------------------------+------------+
|redefined-outer-name                 |4           |
+-------------------------------------+------------+
|too-many-branches                    |3           |
+-------------------------------------+------------+
|too-many-arguments                   |3           |
+-------------------------------------+------------+
|http-response-with-json-dumps        |3           |
+-------------------------------------+------------+
|http-response-with-content-type-json |3           |
+-------------------------------------+------------+
|arguments-differ                     |3           |
+-------------------------------------+------------+
|unnecessary-pass                     |2           |
+-------------------------------------+------------+
|fixme                                |2           |
+-------------------------------------+------------+
|abstract-method                      |2           |
+-------------------------------------+------------+
|use-maxsplit-arg                     |1           |
+-------------------------------------+------------+
|unused-wildcard-import               |1           |
+-------------------------------------+------------+
|unspecified-encoding                 |1           |
+-------------------------------------+------------+
|unnecessary-lambda-assignment        |1           |
+-------------------------------------+------------+
|unexpected-keyword-arg               |1           |
+-------------------------------------+------------+
|too-many-public-methods              |1           |
+-------------------------------------+------------+
|too-many-boolean-expressions         |1           |
+-------------------------------------+------------+
|redefined-builtin                    |1           |
+-------------------------------------+------------+
|pointless-string-statement           |1           |
+-------------------------------------+------------+
|missing-timeout                      |1           |
+-------------------------------------+------------+
|keyword-arg-before-vararg            |1           |
+-------------------------------------+------------+
|inconsistent-return-statements       |1           |
+-------------------------------------+------------+
|import-error                         |1           |
+-------------------------------------+------------+
|function-redefined                   |1           |
+-------------------------------------+------------+
|consider-merging-isinstance          |1           |
+-------------------------------------+------------+
|bare-except                          |1           |
+-------------------------------------+------------+
|assignment-from-no-return            |1           |
+-------------------------------------+------------+
|arguments-renamed                    |1           |
+-------------------------------------+------------+




------------------------------------------------------------------
Your code has been rated at 9.13/10 (previous run: 9.13/10, +0.01)

